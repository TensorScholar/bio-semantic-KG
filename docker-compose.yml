# Docker Compose for Medical Aesthetics Extraction Engine
# Elite Technical Consortium Implementation

version: '3.9'

services:
  # Main extraction engine
  extraction-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production-with-ml
    container_name: medical-extraction-engine
    ports:
      - "8080:8080"  # HTTP API
      - "9090:9090"  # Metrics
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-medical-extraction}
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://redis:6379
      TIMESCALE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-medical-extraction}@timescale:5432/medical
      BROWSERLESS_URL: http://browserless:3000
      BROWSERLESS_TOKEN: ${BROWSERLESS_TOKEN:-medical-extraction}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ML_MODELS_PATH: /app/ml-models
      EXTRACTION_BATCH_SIZE: 10
      MAX_CONCURRENT_EXTRACTIONS: 20
      CACHE_TTL: 3600
      RATE_LIMIT_PER_MINUTE: 100
    volumes:
      - extraction_logs:/app/logs
      - extraction_cache:/app/cache
      - ml_models:/app/ml-models
    depends_on:
      - neo4j
      - elasticsearch
      - redis
      - timescale
      - browserless
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-enterprise
    container_name: medical-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-medical-extraction}
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_dbms_memory_heap_initial__size: 2G
      NEO4J_dbms_memory_heap_max__size: 4G
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_security_procedures_unrestricted: gds.*,apoc.*
      NEO4J_dbms_security_procedures_allowlist: gds.*,apoc.*
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2'
        reservations:
          memory: 3G
          cpus: '1'

  # Elasticsearch for search and analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: medical-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
      "ES_JAVA_OPTS=-Xms2g -Xmx4g"
      cluster.name: medical-extraction
      node.name: medical-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2'
        reservations:
          memory: 3G
          cpus: '1'

  # Redis for caching and session management
  redis:
    image: dragonflydb/dragonfly:latest
    container_name: medical-redis
    ports:
      - "6379:6379"
    command: dragonfly --logtostderr --cache_mode=true --maxmemory=2gb
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # TimescaleDB for time-series analytics
  timescale:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: medical-timescale
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-medical-extraction}
      POSTGRES_DB: medical
      POSTGRES_USER: postgres
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./config/timescale/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Browserless for web scraping
  browserless:
    image: browserless/chrome:latest
    container_name: medical-browserless
    ports:
      - "3000:3000"
    environment:
      MAX_CONCURRENT_SESSIONS: 20
      MAX_QUEUE_LENGTH: 100
      PREBOOT_CHROME: "true"
      KEEP_ALIVE: "true"
      WORKSPACE_DELETE_EXPIRED: "true"
      TOKEN: ${BROWSERLESS_TOKEN:-medical-extraction}
      ENABLE_CORS: "true"
      ENABLE_XVFB: "true"
      CHROME_ARGS: "--no-sandbox --disable-dev-shm-usage --disable-gpu --disable-web-security"
    volumes:
      - browserless_data:/workspace
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: medical-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: medical-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: neo4j-datasource,redis-datasource,postgres-datasource
      GF_FEATURE_TOGGLES_ENABLE: ngalert
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: medical-jaeger
    ports:
      - "16686:16686"  # Web UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      COLLECTOR_OTLP_ENABLED: true
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: http://elasticsearch:9200
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: medical-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - extraction-engine
      - grafana
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: medical-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: medical-pgadmin
    ports:
      - "8082:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@medical.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - timescale
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  # Application volumes
  extraction_logs:
    driver: local
  extraction_cache:
    driver: local
  ml_models:
    driver: local
  
  # Database volumes
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  elasticsearch_data:
    driver: local
  redis_data:
    driver: local
  timescale_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  
  # Management volumes
  browserless_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: medical-extraction-network
    driver: bridge
