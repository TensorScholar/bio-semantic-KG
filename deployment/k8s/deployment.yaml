# Kubernetes Deployment for Medical Aesthetics Extraction Engine
# Elite Technical Consortium Implementation

apiVersion: apps/v1
kind: Deployment
metadata:
  name: medical-extraction-engine
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
    component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: extraction-engine
  template:
    metadata:
      labels:
        app: extraction-engine
        version: v1.0.0
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      initContainers:
      - name: migration
        image: medical-extraction:latest
        command: ["deno", "run", "--allow-all", "src/infrastructure/persistence/migrations/migrate.ts"]
        env:
        - name: NEO4J_URI
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: uri
        - name: NEO4J_USER
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: username
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: password
        - name: ELASTICSEARCH_URL
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: TIMESCALE_URL
          valueFrom:
            secretKeyRef:
              name: timescale-credentials
              key: url
        resources:
          requests:
            memory: "512Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "200m"
        volumeMounts:
        - name: migration-scripts
          mountPath: /app/migrations
          readOnly: true
      containers:
      - name: extraction-engine
        image: medical-extraction:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: PORT
          value: "8080"
        - name: METRICS_PORT
          value: "9090"
        - name: NEO4J_URI
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: uri
        - name: NEO4J_USER
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: username
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: neo4j-credentials
              key: password
        - name: ELASTICSEARCH_URL
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: url
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: username
              optional: true
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
              optional: true
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: url
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: password
              optional: true
        - name: TIMESCALE_URL
          valueFrom:
            secretKeyRef:
              name: timescale-credentials
              key: url
        - name: BROWSERLESS_URL
          valueFrom:
            configMapKeyRef:
              name: browserless-config
              key: url
        - name: BROWSERLESS_TOKEN
          valueFrom:
            secretKeyRef:
              name: browserless-credentials
              key: token
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: encryption-key
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: external-api-keys
              key: openai-api-key
              optional: true
        - name: PINECONE_API_KEY
          valueFrom:
            secretKeyRef:
              name: external-api-keys
              key: pinecone-api-key
              optional: true
        - name: PINECONE_ENVIRONMENT
          valueFrom:
            secretKeyRef:
              name: external-api-keys
              key: pinecone-environment
              optional: true
        - name: PROMETHEUS_ENABLED
          value: "true"
        - name: JAEGER_ENABLED
          value: "true"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger-collector:14268/api/traces"
        - name: JAEGER_SERVICE_NAME
          value: "medical-extraction-engine"
        - name: EXTRACTION_BATCH_SIZE
          value: "10"
        - name: MAX_CONCURRENT_EXTRACTIONS
          value: "20"
        - name: CACHE_TTL
          value: "3600"
        - name: RATE_LIMIT_PER_MINUTE
          value: "100"
        - name: ML_MODELS_PATH
          value: "/app/ml-models"
        - name: PERSIAN_MODEL_PATH
          value: "/app/ml-models/persian-medical"
        - name: ENGLISH_MODEL_PATH
          value: "/app/ml-models/english-medical"
        - name: NER_MODEL_PATH
          value: "/app/ml-models/medical-ner"
        resources:
          requests:
            memory: "4Gi"
            cpu: "2"
            ephemeral-storage: "10Gi"
          limits:
            memory: "8Gi"
            cpu: "4"
            ephemeral-storage: "20Gi"
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
        volumeMounts:
        - name: ml-models
          mountPath: /app/ml-models
          readOnly: true
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
          optional: true
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      - name: browser-pool
        image: browserless/chrome:latest
        ports:
        - containerPort: 3000
          name: browser
          protocol: TCP
        env:
        - name: MAX_CONCURRENT_SESSIONS
          value: "20"
        - name: MAX_QUEUE_LENGTH
          value: "100"
        - name: PREBOOT_CHROME
          value: "true"
        - name: KEEP_ALIVE
          value: "true"
        - name: WORKSPACE_DELETE_EXPIRED
          value: "true"
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: browserless-credentials
              key: token
        - name: ENABLE_CORS
          value: "true"
        - name: ENABLE_XVFB
          value: "true"
        - name: CHROME_ARGS
          value: "--no-sandbox --disable-dev-shm-usage --disable-gpu --disable-web-security"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: cache
        emptyDir:
          sizeLimit: 10Gi
      - name: logs
        emptyDir:
          sizeLimit: 5Gi
      - name: config
        configMap:
          name: app-config
      - name: migration-scripts
        configMap:
          name: migration-scripts
      - name: ssl-certs
        secret:
          secretName: ssl-certificates
          optional: true
      nodeSelector:
        workload: compute-intensive
      tolerations:
      - key: "compute-intensive"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - extraction-engine
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute-optimized
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
apiVersion: v1
kind: Service
metadata:
  name: extraction-engine-service
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: browser
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: extraction-engine
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: extraction-engine-headless
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: extraction-engine

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: extraction-engine-hpa
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: medical-extraction-engine
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: extraction_queue_depth
      target:
        type: AverageValue
        averageValue: "30"
  - type: Pods
    pods:
      metric:
        name: extraction_success_rate
      target:
        type: AverageValue
        averageValue: "0.95"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Min

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: extraction-engine-pdb
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: extraction-engine

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ml-models-pvc
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
  volumeMode: Filesystem

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
data:
  extraction.yaml: |
    batch_size: 10
    max_concurrent: 20
    timeout: 30000
    retry_attempts: 3
    retry_delay: 1000
  
  linguistic.yaml: |
    languages:
      - en
      - fa
    models:
      persian: "HooshvareLab/bert-fa-base-uncased"
      english: "all-MiniLM-L6-v2"
      medical_ner: "dmis-lab/biobert-base-cased-v1.1"
  
  medical.yaml: |
    categories:
      - surgical
      - non-surgical
      - injection
      - laser
      - diagnostic
    complexity_levels:
      - minimal
      - low
      - moderate
      - high
      - extreme
  
  selectors.yaml: |
    clinic:
      name: "h1, .clinic-name, .business-name"
      address: ".address, .location, .contact-info"
      phone: ".phone, .tel, .contact-phone"
      email: ".email, .contact-email"
      website: "a[href^='http']"
    services:
      container: ".services, .procedures, .treatments"
      name: ".service-name, .procedure-name, .treatment-name"
      price: ".price, .cost, .fee"
      description: ".description, .details, .info"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: browserless-config
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
data:
  url: "http://browserless:3000"
  max_sessions: "20"
  max_queue: "100"
  timeout: "30000"
  user_agent: "Mozilla/5.0 (compatible; MedicalExtraction/1.0)"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: migration-scripts
  namespace: medical-aesthetics
  labels:
    app: extraction-engine
    version: v1.0.0
data:
  init.sql: |
    -- Initialize Neo4j constraints and indexes
    CREATE CONSTRAINT clinic_id IF NOT EXISTS FOR (c:Clinic) REQUIRE c.id IS UNIQUE;
    CREATE CONSTRAINT procedure_id IF NOT EXISTS FOR (p:Procedure) REQUIRE p.id IS UNIQUE;
    CREATE CONSTRAINT practitioner_id IF NOT EXISTS FOR (pr:Practitioner) REQUIRE pr.id IS UNIQUE;
    
    CREATE INDEX clinic_name IF NOT EXISTS FOR (c:Clinic) ON (c.name);
    CREATE INDEX procedure_category IF NOT EXISTS FOR (p:Procedure) ON (p.category);
    CREATE INDEX practitioner_specialization IF NOT EXISTS FOR (pr:Practitioner) ON (pr.specializations);
    
    -- Initialize Elasticsearch mappings
    -- This would be handled by the application on startup
